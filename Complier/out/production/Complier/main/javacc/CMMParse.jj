options
{
  static = true;
}
PARSER_BEGIN(CMMParse)
package main.javacc;//the package for saving code
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.*;

public class CMMParse{
public static void main(String[] args) throws ParseException ,FileNotFoundException{
    BufferedReader br = new BufferedReader(new FileReader("D:\\test.txt"));
    CMMParse parse = new CMMParse(System.in);
    while (true){
        System.out.println("Reading from standard input...");
        System.out.print("input:");
        try{
            CMMParse.program();
        }
        catch (Exception e){
            System.out.println("NOK.");
            System.out.println(e.getMessage());
            CMMParse.ReInit(System.in);
        }
        catch (Error e){
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            break;
        }
    }
  }
}

PARSER_END(CMMParse)

SKIP : {
    " "
    |  "\t"
    |  "\n"
    |  "\r"
    |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//--------------------开始进行词法分析--------------------
//定义关键字
TOKEN : {
    <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <SCAN: "scan">
    | <PRINT: "print">
    | <INT: "int">
    | <REAL: "real">
    | <BREAK: "break">
    | <CONTINUE: "continue">
    | <FOR: "for">
    | <CHAR: "char">
    | <BOOL: "bool">
    | <STRING: "string">
    | <TRUE: "true">
    | <FALSE: "false">
}

//定义整型数
TOKEN : {
	<INTEGER_LITERAL: ["0"-"9"](<DIGIT>)*>
}

//定义实数
TOKEN : {
	<REAL_LITERAL: (<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+>
}

//定义标识符
TOKEN : {
	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")* >
       |< #LETTER:["A"-"Z","a"-"z"]>
       |< #DIGIT:["0"-"9"]>
}

//定义字符串
TOKEN : {
    <STRING_LITERAL:
           "\""
           (   (~["\"","\\","\n","\r"])
             | ("\\"
                 ( ["n","t","b","r","f","\\","'","\""]
                 | ["0"-"7"] ( ["0"-"7"] )?
                 | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                 )
               )
           )*
           "\""
       >
}

//定义字符
TOKEN :
{
  <  CHAR_LITERAL :
    "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
    >
}

//分隔符
TOKEN :
{
  < LPARENT: "(" >
| < RPARENT: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMI: ";" >
| < COMMA: "," >
| < DOT: "." >
}

//操作符
TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < UE: "<>" >
| < OR: "||" >
| < AND: "&&" >
| < ADD: "+" >
| < SUB: "-" >
| < MUL: "*" >
| < DIVIDENTIFIERE: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
}

void program():{}
{
  (Statement())+
}


void Statement() : {}
{
    declare_sta()
    | assign_sta()
    | block_sta()
    | if_sta()
    | while_sta()
    | for_sta()
    | print_sta()
    | scan_sta()
    | break_sta()
    | continue_sta()
    | condition_top()
}

void declare_sta():{}
{
	(<INT>|<CHAR>|<REAL>|<BOOL>|<STRING>)
	(declare_sub()<COMMA>)*(<SEMI>)+
}

void declare_sub():{}
{
    < IDENTIFIER > (
    <ASSIGN> condition()
    | array() <ASSIGN> ((<LBRACE>arrayDeclare()<RBRACE>)|condition())
    )
}

void array():{}
{
    <LBRACKET>expression()<RBRACKET>
}

void arrayDeclare():{}
{
    condition()
    (<SEMI>condition())*
}

void assign_sta():{}
{
    <IDENTIFIER><ASSIGN>condition()(<SEMI>)+
}

void if_sta():{}
{
    <IF>< LPARENT > condition() < RPARENT > Statement()
    (<ELSE><IF> < LPARENT > condition() < RPARENT > Statement())*
    (<ELSE>Statement())?
}

void while_sta():{}
{
    <WHILE>< LPARENT > condition() < RPARENT > Statement()
}

void for_sta():{}
{
    <FOR>< LPARENT >(assign_sta()|declare_sta())<SEMI> condition()<SEMI>
     assign_sta()< RPARENT > Statement()
}

void scan_sta():
{}
{
	< SCAN > < LPARENT > (< IDENTIFIER >(array())?|<STRING_LITERAL>)? < RPARENT >(<SEMI>)*
}

void print_sta():
{}
{
	< PRINT > < LPARENT > condition() < RPARENT >(<SEMI>)+
}

void block_sta():{}
{
  < LBRACE > Statement() < RBRACE >
}

void break_sta():{}
{
    <BREAK>(<SEMI>)+
}

void continue_sta():{}
{
    <CONTINUE>(<SEMI>)+
}


void condition_top():{}
{
    condition()(
    <SEMI>
    )+
}

//保证非括号情况OR优先级
void condition():{}
{
    firstCondition()(
    <OR> firstCondition()
    )*
}

//保证非括号情况AND优先级
void firstCondition():{}
{
    secondCondition()(
        <AND> secondCondition()
    )*
}

void secondCondition():{}
{
    thirdCondition()(
        <BIT_OR> thirdCondition()
    )*
}

void thirdCondition():{}
{
    fourthCondition()(
        <BIT_AND> fourthCondition()
        )*
}

void fourthCondition():{}
{
    expression()(
        comparison_op()
        expression()
        )*
}

//+ -
void expression():{}
{
    mdexpression()(
        as_op()
        mdexpression()
        )*
}

// * /
void mdexpression():{}
{
    factor()(
        md_op()
        factor()
        )*
}

void factor():{}
{
    < INTEGER_LITERAL >
    |< REAL_LITERAL>
    |< CHAR_LITERAL>
    |<STRING_LITERAL>
    |<TRUE>
    |<FALSE>
    |<IDENTIFIER>(array())?
    |scan_sta()
    |<LPARENT>condition()<RPARENT>
}

void comparison_op():{}
{
    <EQ>
    |<UE>
    |<LE>
    |<GE>
    |<LT>
    |<GT>
}

void as_op():{}
{
    <ADD>
    |<SUB>
}

void md_op():{}
{
    <MUL>
    |<DIVIDENTIFIERE>
}