/* Generated By:JavaCC: Do not edit this line. CMMParse.java */
package main.javacc;//the package for saving code
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.*;

public class CMMParse implements CMMParseConstants {
public static void main(String[] args) throws ParseException ,FileNotFoundException{
    BufferedReader br = new BufferedReader(new FileReader("D:\u005c\u005ctest.txt"));
    CMMParse parse = new CMMParse(System.in);
    while (true){
        System.out.println("Reading from standard input...");
        System.out.print("input:");
        try{
            CMMParse.program();
        }
        catch (Exception e){
            System.out.println("NOK.");
            System.out.println(e.getMessage());
            CMMParse.ReInit(System.in);
        }
        catch (Error e){
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            break;
        }
    }
  }

  static final public void program() throws ParseException {
    label_1:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SCAN:
      case PRINT:
      case INT:
      case REAL:
      case BREAK:
      case CONTINUE:
      case FOR:
      case CHAR:
      case BOOL:
      case STRING:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case ID:
      case STRING_LITERAL:
      case CHAR_LITERAL:
      case LPARENT:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case CHAR:
    case BOOL:
    case STRING:
      declare_sta();
      break;
    case ID:
      assign_sta();
      break;
    case LBRACE:
      block_sta();
      break;
    case IF:
      if_sta();
      break;
    case WHILE:
      while_sta();
      break;
    case FOR:
      for_sta();
      break;
    case PRINT:
      print_sta();
      break;
    case SCAN:
      scan_sta();
      break;
    case BREAK:
      break_sta();
      break;
    case CONTINUE:
      continue_sta();
      break;
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
    case CHAR_LITERAL:
    case LPARENT:
      condition_top();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declare_sta() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      declare_sub();
      jj_consume_token(COMMA);
    }
    label_3:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
  }

  static final public void declare_sub() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      condition();
      break;
    case LBRACKET:
      array();
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        arrayDeclare();
        jj_consume_token(RBRACE);
        break;
      case SCAN:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case ID:
      case STRING_LITERAL:
      case CHAR_LITERAL:
      case LPARENT:
        condition();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void array() throws ParseException {
    jj_consume_token(LBRACKET);
    expression();
    jj_consume_token(RBRACKET);
  }

  static final public void arrayDeclare() throws ParseException {
    condition();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEMI);
      condition();
    }
  }

  static final public void assign_sta() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    condition();
    label_5:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
  }

  static final public void if_sta() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPARENT);
    condition();
    jj_consume_token(RPARENT);
    Statement();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(LPARENT);
      condition();
      jj_consume_token(RPARENT);
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void while_sta() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPARENT);
    condition();
    jj_consume_token(RPARENT);
    Statement();
  }

  static final public void for_sta() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPARENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      assign_sta();
      break;
    case INT:
    case REAL:
    case CHAR:
    case BOOL:
    case STRING:
      declare_sta();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
    condition();
    jj_consume_token(SEMI);
    assign_sta();
    jj_consume_token(RPARENT);
    Statement();
  }

  static final public void scan_sta() throws ParseException {
    jj_consume_token(SCAN);
    jj_consume_token(LPARENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          array();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RPARENT);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(SEMI);
    }
  }

  static final public void print_sta() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(LPARENT);
    condition();
    jj_consume_token(RPARENT);
    label_8:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
    }
  }

  static final public void block_sta() throws ParseException {
    jj_consume_token(LBRACE);
    Statement();
    jj_consume_token(RBRACE);
  }

  static final public void break_sta() throws ParseException {
    jj_consume_token(BREAK);
    label_9:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
    }
  }

  static final public void continue_sta() throws ParseException {
    jj_consume_token(CONTINUE);
    label_10:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
    }
  }

  static final public void condition_top() throws ParseException {
    condition();
    label_11:
    while (true) {
      jj_consume_token(SEMI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
    }
  }

//‰øùËØÅÈùûÊã¨Âè∑ÊÉÖÂÜµOR‰ºòÂÖàÁ∫?
  static final public void condition() throws ParseException {
    firstCondition();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      jj_consume_token(OR);
      firstCondition();
    }
  }

//‰øùËØÅÈùûÊã¨Âè∑ÊÉÖÂÜµAND‰ºòÂÖàÁ∫?
  static final public void firstCondition() throws ParseException {
    secondCondition();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      jj_consume_token(AND);
      secondCondition();
    }
  }

  static final public void secondCondition() throws ParseException {
    thirdCondition();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_14;
      }
      jj_consume_token(BIT_OR);
      thirdCondition();
    }
  }

  static final public void thirdCondition() throws ParseException {
    fourthCondition();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_15;
      }
      jj_consume_token(BIT_AND);
      fourthCondition();
    }
  }

  static final public void fourthCondition() throws ParseException {
    expression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case UE:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_16;
      }
      comparison_op();
      expression();
    }
  }

//+ -
  static final public void expression() throws ParseException {
    mdexpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_17;
      }
      as_op();
      mdexpression();
    }
  }

// * /
  static final public void mdexpression() throws ParseException {
    factor();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_18;
      }
      md_op();
      factor();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case REAL_LITERAL:
      jj_consume_token(REAL_LITERAL);
      break;
    case CHAR_LITERAL:
      jj_consume_token(CHAR_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case ID:
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        array();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case SCAN:
      scan_sta();
      break;
    case LPARENT:
      jj_consume_token(LPARENT);
      condition();
      jj_consume_token(RPARENT);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparison_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      break;
    case UE:
      jj_consume_token(UE);
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void as_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      break;
    case SUB:
      jj_consume_token(SUB);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void md_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMMParseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xb9fffe80,0xb9fffe80,0xe3000,0x1000000,0x0,0xb9f00400,0x0,0x0,0x0,0x100,0x100,0x10e3000,0x0,0x9000000,0x9000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39f00400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x42,0x8,0x8,0x0,0x0,0x0,0x2,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0x2000,0x4000,0x100000,0x80000,0x1f80,0x18000,0x60000,0x2,0x0,0x1f80,0x18000,0x60000,};
   }

  /** Constructor with InputStream. */
  public CMMParse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMMParse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMMParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CMMParse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMMParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CMMParse(CMMParseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CMMParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
